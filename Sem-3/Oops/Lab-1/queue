#include <iostream>

using namespace std;

#define SIZE 5

class Queue
{
private:
  int front = -1;
  int rear = -1;
  int arr[SIZE];

public:
  /*function which are declared here but defined 
  outside the class with scope resolution operator*/
  int enqueue();
  int dequeue();
  //functions which are both declared and defined here
  //function to display elements in the queue
  int display()
  {
    //checking whether queue is empty
  if (!this->isEmpty())
  {
    cout << endl
         << "\033[1;31mQUEUE IS EMPTY\033[0m" << endl
         << endl;
    return 0;
  }
  int head;
  int tail = this->rear;
  cout << "\033[1;34mJobs to be done in the Queue are: \033[0m" << endl;
  //printing elements based on front or rear is greater in circular queue
  if (rear >= front)
  {
    for (int i = front; i <= rear; i++)
      cout << endl
           << "\033[1;34m" << this->arr[i] << "\033[0m" << endl;
  }
  else
  {
    for (int i = front; i < SIZE; i++)
      cout << endl
           << "\033[1;34m" << this->arr[i] << endl;

    for (int i = 0; i <= rear; i++)
      cout << endl
           << this->arr[i] << "\033[0m" << endl;
  }
  return 1;
}

  //printing the peek(element at the front)
  int peek()
    {
  if (!this->isEmpty())
  {
    cout << endl
         << "\033[1;31mQUEUE IS EMPTY\033[0m" << endl
         << endl;
    return 0;
  }
  cout << endl
       << "\033[1;34mCurrent Job: " << this->arr[this->front] << "\033[0m" << endl;
  return 1;
 }

  //function to check whether the queue is full or not
  int isFull()
  {
  if ((this->front == 0 && this->rear == SIZE - 1) || (this->rear == (this->front - 1) % (SIZE - 1)))
    return 0;
  else
    return 1;
  }
  
  //function to check whether the queue is empty or not
  int isEmpty(){
  if (this->front == -1)
    return 0;
  else
    return 1;
  }
};

int Queue::enqueue()
{
  int jobId;
  cout << "Enter the JobId: " << endl;
  cin >> jobId;

  if (!this->isFull())
  {
    cout << endl
         << "\033[1;31mQUEUE IS FULL\033[0m" << endl
         << endl;
    return 0;
  }
  //adding jobId to the empty queue
  else if (this->front == -1)
  {
    this->front = 0;
    this->rear = 0;
    this->arr[this->rear] = jobId;
  }
  //adding jobId's other than at start
  else
  {
    this->rear = (this->rear + 1) % SIZE;
    this->arr[this->rear] = jobId;
  }
  return 1;
}

int Queue::dequeue()
{

  if (!this->isEmpty())
  {
    cout << endl
         << "\033[1;31mQUEUE IS EMPTY\033[0m" << endl
         << endl;
    return 0;
  }
  //removing the last element
  else if (this->front == this->rear)
  {
    cout << "\033[1;33mThe Job " << this->arr[this->front] << " has been completed\033[0m" << endl;
    this->front = -1;
    this->rear = -1;
  }
  //removing elements rather than the last
  else
  {
    cout << "\033[1;33mThe Job " << this->arr[this->front] << " has been completed\033[0m" << endl;
    this->front = (this->front + 1) % SIZE;
  }
  return 1;
}
